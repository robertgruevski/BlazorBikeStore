@page "/bikes/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorBikeStore.Models
@inject IDbContextFactory<BlazorBikeStore.Data.BlazorBikeStoreContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Bike</h2>
<hr />
@if (Bike is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Bike" OnValidSubmit="UpdateBike" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Bike.BikeId" value="@Bike.BikeId" />
                <div class="mb-3">
                    <label for="manufacturer" class="form-label">Manufacturer:</label>
                    <InputText id="manufacturer" @bind-Value="Bike.Manufacturer" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.Manufacturer" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="model" class="form-label">Model:</label>
                    <InputText id="model" @bind-Value="Bike.Model" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.Model" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="year" class="form-label">Year:</label>
                    <InputNumber id="year" @bind-Value="Bike.Year" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.Year" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Bike.Price" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdon" class="form-label">CreatedOn:</label>
                    <InputDate id="createdon" @bind-Value="Bike.CreatedOn" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.CreatedOn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rating" class="form-label">Rating:</label>
                    <InputNumber id="rating" @bind-Value="Bike.Rating" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Bike.Rating" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bikes">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BikeId { get; set; }

    [SupplyParameterFromForm]
    private Bike? Bike { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Bike ??= await context.Bike.FirstOrDefaultAsync(m => m.BikeId == BikeId);

        if (Bike is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBike()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Bike!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BikeExists(Bike!.BikeId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bikes");
    }

    private bool BikeExists(int bikeid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Bike.Any(e => e.BikeId == bikeid);
    }
}
